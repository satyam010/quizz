{"version":3,"sources":["questions.js","components/QuestionBox.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["qBank","question","answers","correct","questionId","QuestionBox","props","useState","options","answer","setAnswer","className","map","text","index","key","onClick","selected","Result","score","playAgain","App","state","questionBank","responses","computeAnswer","correctAnswer","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+NAAaA,EAAQ,CACnB,CACEC,SAAU,mCACVC,QAAS,CAAC,SAAU,YAAa,UAAW,SAC5CC,QAAS,YACTC,WAAY,UAEd,CACEH,SAAU,mBACVC,QAAS,CAAC,aAAc,cAAe,WAAY,gCACnDC,QAAS,+BACTC,WAAY,UAEd,CACEH,SAAU,6DACVC,QAAS,CAAC,gBAAiB,wBAAyB,kBAAmB,qBACvEC,QAAS,gBACTC,WAAY,UAEd,CACEH,SAAU,wEACVC,QAAS,CAAC,WAAY,wBAAyB,QAAS,aACxDC,QAAS,QACTC,WAAY,UAEd,CACEH,SAAU,0BACVC,QAAS,CAAC,wBAAyB,2BAA4B,gDAAiD,qBAChHC,QAAS,gDACTC,WAAY,W,OCTDC,EAlBK,SAACC,GAAW,IAAD,EACDC,mBAASD,EAAME,SADd,mBACtBC,EADsB,KACdC,EADc,KAE7B,OACE,yBAAKC,UAAU,eACb,yBAAKA,UAAU,YAAYL,EAAML,UAChCQ,EAAOG,KAAI,SAACC,EAAMC,GAAP,OACV,4BACEC,IAAKD,EACLH,UAAU,YACVK,QAAS,WAAON,EAAU,CAACG,IAAQP,EAAMW,SAASJ,KAEjDA,QCFIK,EATA,SAACZ,GAAD,OACb,yBAAKK,UAAU,eACb,yBAAKA,UAAU,SAAf,cAAmCL,EAAMa,MAAzC,yBACA,4BAAQR,UAAU,UAAUK,QAASV,EAAMc,WAA3C,iBC6CWC,G,iNA1CbC,MAAQ,CACNC,aAAcvB,EACdmB,MAAO,EACPK,UAAW,G,EAGbC,cAAgB,SAAChB,EAAOiB,GACnBjB,IAASiB,GACV,EAAKC,SAAU,CAACR,MAAO,EAAKG,MAAMH,MAAQ,IAE5C,EAAKQ,SAAS,CAACH,UAAU,EAAKF,MAAME,UAAY,EAAI,EAAKF,MAAME,UAAU,EAAI,K,EAI/EJ,UAAY,WACV,EAAKO,SAAS,CAACR,MAAM,EAAEK,UAAU,K,wEAIzB,IAAD,OACP,OACE,yBAAKb,UAAU,aACb,gCAAQ,2CACNiB,KAAKN,MAAME,UAAU,GACrBI,KAAKN,MAAMC,aAAaX,KACvB,gBAAEX,EAAF,EAAEA,SAASC,EAAX,EAAWA,QAAQC,EAAnB,EAAmBA,QAAQC,EAA3B,EAA2BA,WAA3B,OACC,kBAAC,EAAD,CACCH,SAAUA,EACVO,QAASN,EACTa,IAAKX,EACLa,SAAU,SAAAR,GAAM,OAAE,EAAKgB,cAAchB,EAAON,SAKvB,IAAzByB,KAAKN,MAAME,UAAmB,kBAAC,EAAD,CAAQL,MAAOS,KAAKN,MAAMH,MAAOC,UAAWQ,KAAKR,YAAe,U,GApCrFS,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.525ea45c.chunk.js","sourcesContent":["export const qBank = [\r\n  {\r\n    question: \"Q1). Everything in React is a   \",\r\n    answers: [\"Module\", \"Component\", \"Package\", \"Class\"],\r\n    correct: \"Component\",\r\n    questionId: \"099099\"\r\n  },\r\n  {\r\n    question: 'Q2). Babel is a ',\r\n    answers: [\"transpiler\", \"interpreter\", \"Compiler\", \"Both Compiler and Transpiler\"],\r\n    correct: \"Both Compiler and Transpiler\",\r\n    questionId: \"183452\"\r\n  },\r\n  {\r\n    question: \"Q3). What are the 2 ways by which data is handled in React\",\r\n    answers: [\"state & props\", \"services & components\", \"webpack & babel\", \"app.js & index.js\"],\r\n    correct: \"state & props\",\r\n    questionId: \"267908\"\r\n  },\r\n  {\r\n    question: \"Q4). In React what is used to pass data to a component from outside ?\",\r\n    answers: [\"setState\", \"render with arguments\", \"props\", \"propTypes\"],\r\n    correct: \"props\",\r\n    questionId: \"333247\"\r\n  },\r\n  {\r\n    question: \"Q5). What is React Js ?\",\r\n    answers: [\"Server side Framework\", \"User-interface framework\", \"A Library for building interaction interfaces\", \"none of the above\"],\r\n    correct: \"A Library for building interaction interfaces\",\r\n    questionId: \"496293\"\r\n  }\r\n];\r\n","import React, {useState} from \"react\";\n\nconst QuestionBox = (props) => {\n  const [answer, setAnswer] = useState(props.options);\n  return (\n    <div className=\"questionBox\">\n      <div className=\"question\">{props.question}</div>\n      {answer.map((text, index) => (\n        <button\n          key={index}\n          className=\"answerBtn\"\n          onClick={() => {setAnswer([text]); props.selected(text);}\n        }>\n          {text}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default QuestionBox;\n","import React from \"react\";\n\nconst Result = (props) => (\n  <div className=\"score-board\">\n    <div className=\"score\">You scored {props.score} / 5 correct answers!</div>\n    <button className=\"playBtn\" onClick={props.playAgain}>\n      Play again!\n    </button>\n  </div>\n);\n\nexport default Result;\n","import React, {Component} from 'react';\nimport {qBank} from \"./questions\"\nimport QuestionBox from \"./components/QuestionBox\"\nimport Result from \"./components/Result\"\nimport './App.css';\n\n\nclass App extends Component {\n  state = {\n    questionBank: qBank,\n    score: 0,\n    responses: 0\n  };\n\n  computeAnswer = (answer,correctAnswer) => {\n    if(answer===correctAnswer){\n      this.setState( {score: this.state.score + 1} );\n    }\n    this.setState({responses:this.state.responses < 5 ? this.state.responses+1 : 5});\n  };\n\n    \n  playAgain = () => {\n    this.setState({score:0,responses:0});\n  }\n\n\n  render() {\n    return (\n      <div className=\"container\">\n        <center><h1>React-Quiz</h1></center>\n        { this.state.responses<5 && \n          this.state.questionBank.map(\n           ({question,answers,correct,questionId})=>(\n            <QuestionBox \n             question={question} \n             options={answers} \n             key={questionId} \n             selected={answer=>this.computeAnswer(answer,correct)} \n            />\n          )\n        )}\n\n        {this.state.responses === 5 ? (<Result score={this.state.score} playAgain={this.playAgain} />):null}\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}